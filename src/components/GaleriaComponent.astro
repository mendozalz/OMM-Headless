---
import { getGalImg } from "../utils/GraphQL";

type Gal = {
  id: string;
  title: string;
  altText: string;
  sourceUrl: string;
};

const galleries = await getGalImg();

// Categorizar imágenes basado en el texto alt o title
const imagenesFamiliares = galleries.filter((gallery: Gal) => 
  gallery.altText?.toLowerCase().includes('familiar') || 
  gallery.altText?.toLowerCase().includes('familia') || 
  gallery.title?.toLowerCase().includes('familiar') || 
  gallery.title?.toLowerCase().includes('familia')
);

const imagenesActor = galleries.filter((gallery: Gal) => 
  gallery.altText?.toLowerCase().includes('actor') || 
  gallery.altText?.toLowerCase().includes('teatro') || 
  gallery.title?.toLowerCase().includes('actor') || 
  gallery.title?.toLowerCase().includes('teatro')
);

const imagenesInvestigador = galleries.filter((gallery: Gal) => 
  gallery.altText?.toLowerCase().includes('investigador') || 
  gallery.altText?.toLowerCase().includes('investigación') || 
  gallery.title?.toLowerCase().includes('investigador') || 
  gallery.title?.toLowerCase().includes('investigación')
);

const imagenesFunmusica = galleries.filter((gallery: Gal) => 
  gallery.altText?.toLowerCase().includes('funmusica') || 
  gallery.altText?.toLowerCase().includes('música') || 
  gallery.title?.toLowerCase().includes('funmusica') || 
  gallery.title?.toLowerCase().includes('música')
);

// Si alguna imagen no tiene categoría específica, asignarla a "Otros"
const imagenesOtras = galleries.filter((gallery: Gal) => 
  !imagenesFamiliares.includes(gallery) && 
  !imagenesActor.includes(gallery) && 
  !imagenesInvestigador.includes(gallery) && 
  !imagenesFunmusica.includes(gallery)
);

interface Props {
  pt: string;
  px: string;
  pb: string;
}

const { pt, px, pb } = Astro.props;
---

<html>
  <head>
    <title>Galería de Fotos</title>
  </head>
  <body>
    <div
      class="galeria-octavio-marulanda h-auto w-full mt-24 lg:mt-28"
      style={`padding-top: ${pt}; padding-left: ${px}; padding-right: ${px}; padding-bottom: ${pb}`}
    >
      <h1 class="intro font-bold text-center text-[26px] lg:text-[32px] py-8">
        Galeria de imagenes
      </h1>

      <div class="details-container">
        <details class="detail-item gallery-detail" open>
          <summary class="summary-header">
            <div class="summary-content">
              <h2>FAMILIARES</h2>
            </div>
            <div class="summary-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </div>
          </summary>
          <div class="gallery-container">
            <div id="gallery" class="gallery-grid">
              {
                imagenesFamiliares.map((image: Gal, index: number) => (
                  <div>
                    <img src={image.sourceUrl} alt={image.altText || `Imagen Familiar ${index + 1}`} />
                    <a href={`#lightbox-familiar-${index + 1}`} />
                  </div>
                ))
              }
            </div>
          </div>
        </details>

        <details class="detail-item gallery-detail">
          <summary class="summary-header">
            <div class="summary-content">
              <h2>ACTOR</h2>
            </div>
            <div class="summary-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </div>
          </summary>
          <div class="gallery-container">
            <div id="gallery" class="gallery-grid">
              {
                imagenesActor.map((image: Gal, index: number) => (
                  <div>
                    <img src={image.sourceUrl} alt={image.altText || `Imagen Actor ${index + 1}`} />
                    <a href={`#lightbox-actor-${index + 1}`} />
                  </div>
                ))
              }
            </div>
          </div>
        </details>

        <details class="detail-item gallery-detail">
          <summary class="summary-header">
            <div class="summary-content">
              <h2>INVESTIGADOR</h2>
            </div>
            <div class="summary-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </div>
          </summary>
          <div class="gallery-container">
            <div id="gallery" class="gallery-grid">
              {
                imagenesInvestigador.map((image: Gal, index: number) => (
                  <div>
                    <img src={image.sourceUrl} alt={image.altText || `Imagen Investigador ${index + 1}`} />
                    <a href={`#lightbox-investigador-${index + 1}`} />
                  </div>
                ))
              }
            </div>
          </div>
        </details>

        <details class="detail-item gallery-detail">
          <summary class="summary-header">
            <div class="summary-content">
              <h2>FUNMUSICA</h2>
            </div>
            <div class="summary-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </div>
          </summary>
          <div class="gallery-container">
            <div id="gallery" class="gallery-grid">
              {
                imagenesFunmusica.map((image: Gal, index: number) => (
                  <div>
                    <img src={image.sourceUrl} alt={image.altText || `Imagen Funmusica ${index + 1}`} />
                    <a href={`#lightbox-funmusica-${index + 1}`} />
                  </div>
                ))
              }
            </div>
          </div>
        </details>

        {imagenesOtras.length > 0 && (
          <details class="detail-item gallery-detail">
            <summary class="summary-header">
              <div class="summary-content">
                <h2>OTRAS IMÁGENES</h2>
              </div>
              <div class="summary-icon">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
              </div>
            </summary>
            <div class="gallery-container">
              <div id="gallery" class="gallery-grid">
                {
                  imagenesOtras.map((image: Gal, index: number) => (
                    <div>
                      <img src={image.sourceUrl} alt={image.altText || `Imagen ${index + 1}`} />
                      <a href={`#lightbox-otra-${index + 1}`} />
                    </div>
                  ))
                }
              </div>
            </div>
          </details>
        )}
      </div>

      {/* Lightboxes */}
      {
        [
          ...imagenesFamiliares.map((image: Gal, index: number) => ({
            id: `lightbox-familiar-${index + 1}`,
            src: image.sourceUrl,
            alt: image.altText || `Imagen Familiar ${index + 1}`,
          })),
          ...imagenesActor.map((image: Gal, index: number) => ({
            id: `lightbox-actor-${index + 1}`,
            src: image.sourceUrl,
            alt: image.altText || `Imagen Actor ${index + 1}`,
          })),
          ...imagenesInvestigador.map((image: Gal, index: number) => ({
            id: `lightbox-investigador-${index + 1}`,
            src: image.sourceUrl,
            alt: image.altText || `Imagen Investigador ${index + 1}`,
          })),
          ...imagenesFunmusica.map((image: Gal, index: number) => ({
            id: `lightbox-funmusica-${index + 1}`,
            src: image.sourceUrl,
            alt: image.altText || `Imagen Funmusica ${index + 1}`,
          })),
          ...imagenesOtras.map((image: Gal, index: number) => ({
            id: `lightbox-otra-${index + 1}`,
            src: image.sourceUrl,
            alt: image.altText || `Imagen ${index + 1}`,
          })),
        ].map(({ id, src, alt }) => (
          <div class="lightbox" id={id}>
            <div class="content">
              <img src={src} alt={alt} />
              <a class="close" href="#gallery" />
            </div>
          </div>
        ))
      }
    </div>
  </body>
</html>

<style>
  .galeria-octavio-marulanda {
    margin: 5px;
    position: relative;
    height: auto;
    /* padding: 115px 15px 15px; */
  }

  .details-container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0;
  }

  .detail-item {
    background: #1a1a1a;
    border-radius: 12px;
    margin-bottom: 1rem;
    overflow: hidden;
    border: 2px solid #333;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .summary-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.2rem 1.5rem;
    cursor: pointer;
    user-select: none;
    transition: all 0.3s ease;
    background: #2d2d2d;
    border-bottom: 2px solid #333;
  }

  .summary-header:hover {
    background: #3d3d3d;
  }

  .summary-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .summary-content .icon {
    width: 28px;
    height: 28px;
    stroke: #064f5e;
    stroke-width: 2;
  }

  .summary-header h2 {
    color: #ffffff;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .summary-icon svg {
    transition: transform 0.3s ease;
  }

  details[open] .summary-icon svg {
    transform: rotate(180deg);
  }

  .gallery-container {
    padding: 1.5rem;
    background: #1a1a1a;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }

  .gallery-grid div {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease;
  }

  .gallery-grid div:hover {
    transform: scale(1.03);
  }

  .gallery-grid img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    display: block;
    border-radius: 8px;
  }

  .gallery-grid a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
    cursor: pointer;
  }

  /* Lightbox Styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .lightbox:target {
    opacity: 1;
    pointer-events: auto;
  }

  .lightbox .content {
    position: relative;
    max-width: 90%;
    max-height: 90%;
  }

  .lightbox img {
    max-width: 100%;
    max-height: 90vh;
    display: block;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  }

  .lightbox .close {
    position: absolute;
    top: -40px;
    right: 0;
    width: 30px;
    height: 30px;
    background: #fff;
    color: #000;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    font-weight: bold;
  }

  .lightbox .close::before,
  .lightbox .close::after {
    content: "";
    position: absolute;
    width: 20px;
    height: 2px;
    background: #000;
    transform: rotate(45deg);
  }

  .lightbox .close::after {
    transform: rotate(-45deg);
  }

  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }

    .gallery-grid img {
      height: 150px;
    }
  }
</style>

<script>
  // Función para inicializar la galería que se ejecutará inmediatamente
  (function() {
    // Función para cerrar otros detalles cuando se abre uno nuevo
    function closeOtherDetails(currentDetail: HTMLDetailsElement): void {
      document.querySelectorAll<HTMLDetailsElement>(".gallery-detail").forEach((detail) => {
        if (detail !== currentDetail && detail.open) {
          const content = detail.querySelector<HTMLElement>(".gallery-container");
          if (content) {
            // Establecer altura inicial antes de animar
            content.style.maxHeight = content.scrollHeight + "px";
            content.style.opacity = "1";
            content.style.transform = "translateY(0)";
            
            // Forzar un reflow
            content.offsetHeight;
            
            // Animar el cierre
            content.style.maxHeight = "0";
            content.style.opacity = "0";
            content.style.transform = "translateY(-10px)";
            
            setTimeout(() => {
              detail.open = false;
            }, 600); // Tiempo ligeramente mayor para asegurar que la animación termine
          } else {
            detail.open = false;
          }
        }
      });
    }

    // Configurar los detalles inicialmente
    function setupDetails(): void {
      const allDetails = document.querySelectorAll<HTMLDetailsElement>(".gallery-detail");
      let foundOpen = false;
      
      // Configurar cada detalle
      allDetails.forEach((detail) => {
        const content = detail.querySelector<HTMLElement>(".gallery-container");
        if (content) {
          // Mejorar las propiedades de transición
          content.style.overflow = "hidden";
          content.style.transition = "max-height 0.6s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1), transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)";
          
          if (!detail.open) {
            content.style.maxHeight = "0";
            content.style.opacity = "0";
            content.style.transform = "translateY(-10px)";
          } else {
            foundOpen = true;
            content.style.maxHeight = content.scrollHeight + "px";
            content.style.opacity = "1";
            content.style.transform = "translateY(0)";
          }
        }
      });
      
      // Si ninguno está abierto, abrir el primero
      if (!foundOpen && allDetails.length > 0) {
        allDetails[0].open = true;
        const content = allDetails[0].querySelector<HTMLElement>(".gallery-container");
        if (content) {
          // Establecer estado inicial
          content.style.maxHeight = "0";
          content.style.opacity = "0";
          content.style.transform = "translateY(-10px)";
          
          // Forzar un reflow
          content.offsetHeight;
          
          // Animar apertura
          content.style.maxHeight = content.scrollHeight + "px";
          content.style.opacity = "1";
          content.style.transform = "translateY(0)";
        }
      }
      
      // Agregar event listeners
      allDetails.forEach((detail) => {
        // Remover event listeners existentes para evitar duplicados
        const summary = detail.querySelector("summary");
        if (summary && summary.parentNode) {
          const newSummary = summary.cloneNode(true);
          summary.parentNode.replaceChild(newSummary, summary);
          
          // Agregar nuevo event listener
          newSummary.addEventListener("click", function(event) {
            event.preventDefault();
            
            if (!detail.open) {
              closeOtherDetails(detail);
              
              detail.open = true;
              const content = detail.querySelector<HTMLElement>(".gallery-container");
              if (content) {
                // Establecer estado inicial
                content.style.maxHeight = "0";
                content.style.opacity = "0";
                content.style.transform = "translateY(-10px)";
                
                // Forzar un reflow
                content.offsetHeight;
                
                // Animar apertura
                content.style.maxHeight = content.scrollHeight + "px";
                content.style.opacity = "1";
                content.style.transform = "translateY(0)";
              }
            } else {
              const content = detail.querySelector<HTMLElement>(".gallery-container");
              if (content) {
                // Establecer altura inicial antes de animar
                content.style.maxHeight = content.scrollHeight + "px";
                content.style.opacity = "1";
                content.style.transform = "translateY(0)";
                
                // Forzar un reflow
                content.offsetHeight;
                
                // Animar el cierre
                content.style.maxHeight = "0";
                content.style.opacity = "0";
                content.style.transform = "translateY(-10px)";
                
                setTimeout(() => {
                  detail.open = false;
                }, 600); // Tiempo ligeramente mayor para asegurar que la animación termine
              }
            }
          });
        }
      });
    }

    // Ejecutar la configuración inmediatamente
    setupDetails();

    // También ejecutar cuando el DOM esté listo
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", setupDetails);
    }

    // Configurar para ejecutarse cuando se navegue mediante Astro View Transitions
    document.addEventListener("astro:page-load", setupDetails);
    document.addEventListener("astro:after-swap", setupDetails);
    
    // Ejecutar después de un breve retraso para asegurar que todo esté cargado
    setTimeout(setupDetails, 100);
  })();
</script>
